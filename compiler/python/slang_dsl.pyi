from typing import Any


class Attribute:
    name: str
    arguments: list[str]

    def __init__(self, name: str, arguments: list[str]) -> None: ...
    def serialize(self) -> str: ...
    def json(self) -> str: ...
    def dict(self) -> dict[str, Any]: ...

class Rule:
    name: str
    attributes: list[Attribute]
    grants: list[list[str]]
    rules: list["Rule"]
    include_fragments: list[str]

    def __init__(self, name: str, attributes: list[Attribute], grants: list[str], rules: list["Rule"], include_fragments: list[str] = ...) -> None: ...
    def serialize(self) -> str: ...
    def json(self) -> str: ...
    def dict(self) -> dict[str, Any]: ...

class Entrypoint:
    entrypoint: str
    rules: list[Rule]

    def __init__(self, entrypoint: str, rules: list[Rule]) -> None: ...
    def serialize(self) -> str: ...
    def json(self) -> str: ...
    def dict(self) -> dict[str, Any]: ...

class Fragment:
    name: str
    grants: list[list[str]]
    rules: list[Rule]

    def __init__(self, name: str, grants: list[str], rules: list[Rule]) -> None: ...
    def serialize(self) -> str: ...
    def json(self) -> str: ...
    def dict(self) -> dict[str, Any]: ...


class SlangFile:
    fragments: list[Fragment]
    entrypoints: list[Entrypoint]

    def __init__(self, entrypoints: list[Entrypoint], fragments: list[Fragment] = ...) -> None: ...
    def serialize(self) -> str: ...
    def json(self) -> str: ...
    def dict(self) -> dict[str, Any]: ...

def parse(input: str) -> SlangFile: ...